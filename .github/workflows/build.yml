name: build

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

env:
  CACHE_VERSION: 2
  PAWPAW_SKIP_LTO: 1
  PAWPAW_VERSION: d0c6dc7b1b82e5bee194d43490954492753feeac

jobs:
  # macOS native universal build
  macos_universal:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/PawPawBuilds
          key: macos-universal-v${{ env.CACHE_VERSION }}
      - name: Set up dependencies
        run: |
          brew install cmake jq meson
      - name: Bootstrap macOS universal
        shell: bash
        run: |
          git clone https://github.com/DISTRHO/PawPaw.git
          git -C PawPaw checkout ${{ env.PAWPAW_VERSION }}
          ./PawPaw/bootstrap-plugins.sh macos-universal
          ./PawPaw/bootstrap-qt.sh macos-universal
          ./PawPaw/.cleanup.sh macos-universal
      - name: Build macOS universal
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          source PawPaw/local.env macos-universal
          cmake -S . -B build
          cmake --build build -j $(sysctl -n hw.logicalcpu)
      - uses: actions/upload-artifact@v3
        with:
          name: macOS dmg
          path: build/*.dmg
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            path: build/*.dmg

  # linux with win32 cross-compilation
  win32:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/PawPawBuilds
          key: win32-v${{ env.CACHE_VERSION }}
      - name: Restore debian packages cache
        run: |
          if [ -d ~/PawPawBuilds/debs ] && [ "$(ls ~/PawPawBuilds/debs | wc -l)" -ne 0 ]; then \
            sudo cp ~/PawPawBuilds/debs/*.deb /var/cache/apt/archives/; \
          fi
      - name: Fix GitHub's mess
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo dpkg --add-architecture i386
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libc6:i386 libgcc-s1:i386 libstdc++6:i386
      - name: Set up dependencies
        run: |
          sudo apt-get install -y build-essential curl cmake jq meson mingw-w64 gperf qttools5-dev qttools5-dev-tools xvfb \
            binutils-mingw-w64-i686 g++-mingw-w64-i686 mingw-w64 wine-stable
      - name: Cache debian packages
        run: |
          mkdir -p ~/PawPawBuilds/debs
          sudo mv /var/cache/apt/archives/*.deb ~/PawPawBuilds/debs/
      - name: Bootstrap win32 cross-compiled
        shell: bash
        run: |
          git clone https://github.com/DISTRHO/PawPaw.git
          git -C PawPaw checkout ${{ env.PAWPAW_VERSION }}
          ./PawPaw/bootstrap-plugins.sh win32
          ./PawPaw/bootstrap-qt.sh win32
          ./PawPaw/.cleanup.sh win32
      - name: Build win32 cross-compiled
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          source PawPaw/local.env win32
          cmake -DCMAKE_CROSSCOMPILING=ON -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=i686 \
                -DCMAKE_AR=/usr/bin/i686-w64-mingw32-ar -DCMAKE_C_COMPILER_AR=/usr/bin/i686-w64-mingw32-ar -DCMAKE_CXX_COMPILER_AR=/usr/bin/i686-w64-mingw32-ar \
                -DCMAKE_RANLIB=/usr/bin/i686-w64-mingw32-ranlib -DCMAKE_C_COMPILER_RANLIB=/usr/bin/i686-w64-mingw32-ranlib -DCMAKE_CXX_COMPILER_RANLIB=/usr/bin/i686-w64-mingw32-ranlib \
                -DCMAKE_CROSSCOMPILING_EMULATOR=wine \
                -DCMAKE_RC_COMPILER=i686-w64-mingw32-windres \
                -S . -B build
          cmake --build build -j $(nproc)
      - name: Create zip package
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          source PawPaw/local.env win32
          mkdir -p Chibi-win32/{imageformats,iconengines,platforms,styles}
          mv build/*.exe build/carla/cmake/carla-discovery-*.exe build/carla/cmake/*.dll Chibi-win32/
          cp ${PAWPAW_PREFIX}/bin/Qt5{Core,Gui,Svg,Widgets}.dll Chibi-win32/
          cp ${PAWPAW_PREFIX}/lib/qt5/plugins/imageformats/qsvg.dll Chibi-win32/imageformats/
          cp ${PAWPAW_PREFIX}/lib/qt5/plugins/iconengines/qsvgicon.dll Chibi-win32/iconengines/
          cp ${PAWPAW_PREFIX}/lib/qt5/plugins/platforms/qwindows.dll Chibi-win32/platforms/
          cp ${PAWPAW_PREFIX}/lib/qt5/plugins/styles/qwindowsvistastyle.dll Chibi-win32/styles/
          zip -r -9 Chibi-win32.zip Chibi-win32
      - uses: actions/upload-artifact@v3
        with:
          name: win32 zip
          path: ./*.zip
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            path: ./*.zip

  # linux with win64 cross-compilation
  win64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/PawPawBuilds
          key: win64-v${{ env.CACHE_VERSION }}
      - name: Restore debian packages cache
        run: |
          if [ -d ~/PawPawBuilds/debs ] && [ "$(ls ~/PawPawBuilds/debs | wc -l)" -ne 0 ]; then \
            sudo cp ~/PawPawBuilds/debs/*.deb /var/cache/apt/archives/; \
          fi
      - name: Fix GitHub's mess
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo dpkg --add-architecture i386
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libc6:i386 libgcc-s1:i386 libstdc++6:i386
      - name: Set up dependencies
        run: |
          sudo apt-get install -y build-essential curl cmake jq meson mingw-w64 gperf qttools5-dev qttools5-dev-tools xvfb \
            binutils-mingw-w64-x86-64 g++-mingw-w64-x86-64 mingw-w64 wine-stable
      - name: Cache debian packages
        run: |
          mkdir -p ~/PawPawBuilds/debs
          sudo mv /var/cache/apt/archives/*.deb ~/PawPawBuilds/debs/
      - name: Bootstrap win64 cross-compiled
        shell: bash
        run: |
          git clone https://github.com/DISTRHO/PawPaw.git
          git -C PawPaw checkout ${{ env.PAWPAW_VERSION }}
          ./PawPaw/bootstrap-plugins.sh win64
          ./PawPaw/bootstrap-qt.sh win64
          ./PawPaw/.cleanup.sh win64
      - name: Build win64 cross-compiled
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          source PawPaw/local.env win64
          cmake -DCMAKE_CROSSCOMPILING=ON -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=x86_64 \
                -DCMAKE_AR=/usr/bin/x86_64-w64-mingw32-ar -DCMAKE_C_COMPILER_AR=/usr/bin/x86_64-w64-mingw32-ar -DCMAKE_CXX_COMPILER_AR=/usr/bin/x86_64-w64-mingw32-ar \
                -DCMAKE_RANLIB=/usr/bin/x86_64-w64-mingw32-ranlib -DCMAKE_C_COMPILER_RANLIB=/usr/bin/x86_64-w64-mingw32-ranlib -DCMAKE_CXX_COMPILER_RANLIB=/usr/bin/x86_64-w64-mingw32-ranlib \
                -DCMAKE_CROSSCOMPILING_EMULATOR=wine \
                -DCMAKE_RC_COMPILER=x86_64-w64-mingw32-windres \
                -S . -B build
          cmake --build build -j $(nproc)
      - name: Create zip package
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          source PawPaw/local.env win64
          mkdir -p Chibi-win64/{imageformats,iconengines,platforms,styles}
          mv build/*.exe build/carla/cmake/carla-discovery-*.exe build/carla/cmake/*.dll Chibi-win64/
          cp ${PAWPAW_PREFIX}/bin/Qt5{Core,Gui,Svg,Widgets}.dll Chibi-win64/
          cp ${PAWPAW_PREFIX}/lib/qt5/plugins/imageformats/qsvg.dll Chibi-win64/imageformats/
          cp ${PAWPAW_PREFIX}/lib/qt5/plugins/iconengines/qsvgicon.dll Chibi-win64/iconengines/
          cp ${PAWPAW_PREFIX}/lib/qt5/plugins/platforms/qwindows.dll Chibi-win64/platforms/
          cp ${PAWPAW_PREFIX}/lib/qt5/plugins/styles/qwindowsvistastyle.dll Chibi-win64/styles/
          zip -r -9 Chibi-win64.zip Chibi-win64
      - uses: actions/upload-artifact@v3
        with:
          name: win64 zip
          path: ./*.zip
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            path: ./*.zip
